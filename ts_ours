.data

.globl f1_
f1_: .quad "f1"


.globl f2_
f2_: .quad "f2"


.globl f3_
f3_: .quad "f3"


.globl f4_
f4_: .quad "f4"


.globl f5_
f5_: .quad "f5"


out_of_bounds_msg: .string "out-of-bounds array access"
invalid_alloc_msg: .string "invalid allocation amount"
        
.text

.globl f1
f1:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp f1_entry

f1_entry:
  movq $42, %rax
  jmp f1_epilogue

f1_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl f2
f2:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp f2_entry

f2_entry:
  movq 16(%rbp), %rax
  jmp f2_epilogue

f2_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl f3
f3:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp
  movq $0, -8(%rbp)
  jmp f3_entry

f3_entry:
  movq 16(%rbp), %r8
  addq 24(%rbp), %r8
  movq %r8, -8(%rbp)
  movq -8(%rbp), %rax
  jmp f3_epilogue

f3_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl f4
f4:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp
  movq $0, -8(%rbp)
  movq $0, -16(%rbp)
  jmp f4_entry

f4_entry:
  movq 16(%rbp), %r8
  addq 24(%rbp), %r8
  movq %r8, -8(%rbp)
  movq -8(%rbp), %r8
  addq 32(%rbp), %r8
  movq %r8, -16(%rbp)
  movq -16(%rbp), %rax
  jmp f4_epilogue

f4_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl f5
f5:
  pushq %rbp
  movq %rsp, %rbp
  subq $32, %rsp
  movq $0, -8(%rbp)
  movq $0, -16(%rbp)
  movq $0, -24(%rbp)
  jmp f5_entry

f5_entry:
  movq 16(%rbp), %r8
  addq 24(%rbp), %r8
  movq %r8, -8(%rbp)
  movq -8(%rbp), %r8
  addq 32(%rbp), %r8
  movq %r8, -16(%rbp)
  movq -16(%rbp), %r8
  addq 40(%rbp), %r8
  movq %r8, -24(%rbp)
  movq -24(%rbp), %rax
  jmp f5_epilogue

f5_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl main
main:
  pushq %rbp
  movq %rsp, %rbp
  subq $2736, %rsp
  movq $0, -8(%rbp)
  movq $0, -16(%rbp)
  movq $0, -24(%rbp)
  movq $0, -32(%rbp)
  movq $0, -40(%rbp)
  movq $0, -48(%rbp)
  movq $0, -56(%rbp)
