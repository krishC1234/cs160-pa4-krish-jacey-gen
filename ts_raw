struct st1 {
  f1: int,
  f2: &int
}

struct st2 {
  f1: &st1
}

extern e1: () -> int;
extern e2: (&int) -> int;
extern e3: (int, &st) -> int;
extern e4: (int, &st2, int) -> int;
extern e5: (int, int, int, &int, int, &int) -> &st2;

let foo: int;
let bar: &int;
let baz: &st1;
let fez: &st2;

fn main() -> int {
  let id0: int, id1: &&&int, id2: &&&int, id3: int, id4: &&int, id5: &int, id6: &&&(&int) -> &int, id7: int, id8: &&&int, id9: &&int, id10: &&st1, id11: &&&int, id12: &int, id13: &&st2, id14: &int, id15: &&int, id16: &st, id17: &&st2, id18: &&&(int, &int) -> int, id19: &st1, id20: &st2, id21: &&&(&int) -> &int, id22: &&&&st, id23: &(&int) -> &int, id24: &st1 = e5(6, foo != e1(), id19.f1, *id4, id12[foo], id9[id3]).f1, id25: &&st1, id26: &(int, &int) -> int, id27: &st2, id28: &st1, id29: &&&st, id31: &&&&&int, id30: &&int = id31[0][f1() + 6][id4[e1()][e2(id5)]], id32: &(&int) -> &int, id33: &() -> int, id34: &&&&(&int) -> &int, id35: &&&(&int) -> &int, id36: &&&&int, id37: &&st2, id38: &(int, &int) -> int, id39: &(&int) -> &int, id40: &&st1, id41: &&&&st1, id42: &(int, &int) -> int, id43: &&(&int) -> &int, id44: &&&() -> int, id45: &&(&int) -> &int, id46: &&st1, id47: &&(&int) -> &int, id48: &&&&() -> int, id49: &() -> int, id50: &() -> int, id51: &&&&st, id52: &&&() -> int;
  id0 = id0;
  *bar = 9;
  f2(*id1[*bar]);
  fez.f1.f2 = new int;
  f3(*id2[id3] == id4[*id5], id6[id7][3 == e1()](*id8[foo]));
  id9[id10[7].f1] = new int *id11[10][foo / e1()];
  id12 = new int 10;
  if 5 {
    id7 = fez.f1.f2[e4(-0, id13[e1()], 3)];
    while -f2(bar)[f3(f1(), id14)] {
      e4(e3(id15[id3][f3(2, id5)], id16), *id17, id18[id7][id19.f1](id20.f1.f1, id10[id0].f2));
      id12 = new int id3;
      **id21(nil);
      f1();
      e3(-foo, id22[8][6][10]);
      bar = new int e2(*id1[foo]);
      id23(id4[e4(id5 == id5, *id13, 3)]);
    }
    while 5 * f1() {
      id7 = id24.f1;
      f2(id15[id25[id7].f1]);
      f2(id20.f1.f2);
      f1();
      *id2 = new &int;
      bar = new int;
      id20 = *id17;
      f1();
      id26(*id27.f1.f2, f2(id28.f2));
    }
    while 7 {
      *bar = id24.f1;
      e3(id3, *id29[id28.f1]);
      bar = new int;
      id30 = new &int id11[foo][f1()][id32(id5)[*id14]];
      id33();
      *id34[id0][8 + foo](id35[e1()][id0](*id9));
      f1();
      f1();
    }
    f1();
    f2(*id36[f1()][*id14]);
    *bar = *id25[e1()].f2;
  }
  else {
    if foo {
      e1();
      e4(id10[id0].f1 * 8, *id37, id7);
      ***id1 = id1[10][f1()][id38(id3, baz.f2)];
      f1();
      id14 = new int foo;
      id15[id30[2] != f2(id5)] = id39(*id4);
      *id40 = id41[10][id42(f1(), id12)][9];
      id23(**id36[e1()]);
    }
    else {
      id19.f1 = e3(id23(id5) == id12, id16);
      f1();
      id30 = new &int;
      id9[id0] = new int f1();
      *fez.f1.f2 = id38(id3, id43[0](f2(id5)));
      id19.f1 = id44[f1()][-foo]();
      f2(id5);
      id7 = 8;
      f2(id14);
      id3 = id39(id15[f1()]) == id45[id0](id9[foo]);
      id46[id12[7]].f2 = new int;
    }
    while id0 {
      id32 = id47[4];
      *id44[foo] = id48[1][*id12][id12 != id4[e1()]];
      id14 = new int;
      f1();
      e5(7, e1(), f3(7, *id4), id9[*id39(id12)], 5, id14);
      e2(*id2[7]);
    }
    e4(7, nil, id0);
    id11[9][*id9[foo]] = new int;
    if 9 {
      id19 = nil;
      id9 = new &int **id15;
      id3 = baz.f1;
      id46[id49()].f2 = new int;
      f3(f2(*id15) == fez.f1.f2, f2(id1[6][bar == id14]));
      id12 = new int 10;
      **id36 = new &int *id24.f2 - id32(id5)[e1() * e1()];
      id18[*id12][id24.f1](*id32(bar) > id4[foo][f3(f1(), id14)], id12);
      id50();
    }
    else {
      *id11 = new &int 0;
      f1();
      foo = id18[id7][id19.f1](id7, *id1[3]);
      id4 = new &int f1();
      id14 = new int ***id1;
      id49();
      e3(-foo, id51[f1()][6][10]);
    }
    f1();
    return 8;
  }
  *id4 = new int id52[id3][0 != id7]();
  id28.f1 = id5 != *id8[f1()];
  id7 = id30[f1()][*baz.f2];
  return 8;
}

fn f1() -> int {
  return 42;
}

fn f2(p: &int) -> &int {
  return p;
}

fn f3(p: int, q: &int) -> int {
  return p + *q;
}